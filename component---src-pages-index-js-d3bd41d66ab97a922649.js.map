{"version":3,"sources":["webpack:///./src/components/CardCellDate.js","webpack:///./src/components/CardCell.js","webpack:///./src/components/XCard.js","webpack:///./src/pages/index.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js"],"names":["Container","styled","div","withConfig","displayName","componentId","_ref","bg","CardCellDate","props","date","react_default","a","createElement","Cell","CellContent","CardCell","type","current","afterCurrent","onMouseDown","content","color","components_CardCellDate","XCard","_this","_React$Component","call","this","cardState","TODAY","Date","startDate","setDate","getDate","dates","DAY_NAMES","DAYS_IN_MONTH","currentDay","dayIndex","getDay","currentMonth","getMonth","i","day","dayName","month","todayIndex","j","_dates$j","isToday","go_index_esm","size","style","state","status","currentIndex","title","archived","toggleX","bind","assertThisInitialized_default","index","newStatus","clone_default","currentCell","cellContent","newType","index_esm","Object","assign","setState","concat","componentDidUpdate","prevProps","prevState","snapshot","console","log","render","_this2","_this$state","XCard_Container","map","cell","components_CardCell","key","React","Component","IndexPage","layout","seo","keywords","components_XCard","__webpack_require__","d","__webpack_exports__","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","StaticQueryContext","createContext","Consumer","staticQueryData","data","query","children","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","ProdPageRenderer","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","json","shape","SEO","description","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","property","author","length","join","defaultProps","arrayOf","Header","siteTitle","background","marginBottom","margin","maxWidth","padding","gatsby_browser_entry","to","textDecoration","Layout","Fragment","header","paddingTop","getFullYear","href","_755544856","node"],"mappings":"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","file":"component---src-pages-index-js-d3bd41d66ab97a922649.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  background-color: ${({ bg }) => bg};\n  color: #333;\n  width: 100%;\n  font-size: 14px;\n  white-space: nowrap;\n  height: 1.5rem;\n  border-bottom: 0px solid black;\n\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst CardCellDate = (props) => {\n  const { date, bg } = props;\n  return (\n    <Container bg={bg}>\n      {date}\n    </Container>\n  );\n}\n\nexport default CardCellDate;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport CardCellDate from './CardCellDate';\n\nconst Cell = styled.div`\n  background-color: ${({ bg }) => bg};\n  width: 100%;\n  height: 100%;\n  border: 1px solid #333;\n\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst CellContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: flex-start;\n  width: auto;\n  height: 100%;\n`;\n\nconst CardCell = (props) => {\n  const { type, current, afterCurrent, onMouseDown, date, content } = props;\n\n  let color = '#33ccff';\n\n\n  if (afterCurrent) {\n    color = '#ccc';\n  } else if (current) {\n    color = '#33ccff';\n  } else {\n    color = '#fff';\n  }\n\n  if (type === 1) {\n    color = '#00ff80';\n  }\n\n  return (\n    <Cell\n      onMouseDown={onMouseDown}\n      bg={color}\n    >\n      <CardCellDate date={date} type={type} bg={color} />\n      <CellContent>\n        {content}\n      </CellContent>\n    </Cell>\n  );\n}\n\nexport default CardCell;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { FaTimes } from 'react-icons/fa';\nimport { GoCircleSlash } from 'react-icons/go';\nimport _ from 'lodash';\n\nimport CardCell from './CardCell';\n\nconst Container = styled.div`\n  display: grid;\n  grid-template-columns: repeat(5, 4rem);\n  grid-template-rows: repeat(6, 5.5rem);\n  justify-items: center;\n  align-items: center;\n  justify-content: center;\n  grid-auto-flow: row;\n  max-width: auto;\n  grid-gap: 5px;\n  -webkit-touch-callout: none; /* iOS Safari */\n    -webkit-user-select: none; /* Safari */\n     -khtml-user-select: none; /* Konqueror HTML */\n       -moz-user-select: none; /* Firefox */\n        -ms-user-select: none; /* Internet Explorer/Edge */\n            user-select: none;\n`;\n\nclass XCard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    let cardState = [{}];\n    let cardLength = 30;\n    let archived = false;\n    const TODAY = new Date();\n\n    if (archived) {\n      // load in old card data,\n      // get the start date based on this\n    }\n\n    // TODO: Each Card must have its own START DATE variable to track what the first day is\n    //TODO: Each Card must have its own TODAY_INDEX.\n    //      - If it is an older card, it does not need one and can skip this step\n\n    let startDate = new Date();\n    startDate.setDate(TODAY.getDate() - 3);\n\n    let dates = [{}];\n    const DAY_NAMES = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n    const DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n    // REFERENCE:\n    // get today's day index- date.getDay()\n    // get today's day value- String(date.getDate().padStart(2, '0'))\n    // get today's month number- String(today.getMonth() + 1).padStart(2, '0')\n    // get today's month index- startDate.getMonth()\n    // get today's date- let today = new Date()\n    //let today = new Date();\n    //let dayNum = String(today.getDate()).padStart(2, '0');\n    //let monthNum = String(today.getMonth() + 1).padStart(2, '0');\n\n    //iterators\n    let currentDay = startDate.getDate(); // value of 1 - DAYS_IN_MONTH\n    let dayIndex = startDate.getDay(); // value of 0-6\n    let currentMonth = startDate.getMonth() + 1; //value of 1 - 12\n\n    //The purpose of this is to generate days of the month to output to the card\n    // at a later time, the startDate variable would have to be received via API\n    for (let i = 0; i < cardLength; i++) {\n\n      dates[i] = {\n        day: currentDay,\n        dayName: DAY_NAMES[dayIndex],\n        month: currentMonth,\n      }\n\n      //iterate the day number. If it's the maximum days in the month then reset back to 1\n      if (currentDay === DAYS_IN_MONTH[currentMonth - 1]) {\n        currentDay = 1;\n\n        //If it's December, reset back to January\n        if (currentMonth === 12) {\n          currentMonth = 1;\n        } else {\n          currentMonth = currentMonth + 1;\n        }\n      } else {\n        currentDay = currentDay + 1;\n      }\n      //Iterate dayIndex\n      // Resets back to 0 after 6 since 7 days in the week\n      if (dayIndex === 6) {\n        dayIndex = 0;\n      } else {\n        dayIndex = dayIndex + 1;\n      }\n    }\n\n    let todayIndex = -1;\n    for (let j = 0; j < cardLength; j++) {\n      let { dayName, month, day} = dates[j];\n      let isToday = (TODAY.getDate() == day) && (TODAY.getMonth()+1 == month);\n      if (isToday) todayIndex = j;\n      cardState[j] = {\n        type: 0,\n        current: isToday,\n        content: (todayIndex === -1) ? <GoCircleSlash size={'4rem'} style={{ color: '#ff003b'}}/> : <div />,\n        date: dayName + \" \" + month + \"/\" + day,\n      }\n    }\n\n    this.state = {\n      status: cardState,\n      currentIndex: todayIndex,\n      startDate: startDate,\n      title: '',\n      archived: false,\n    }\n\n    this.toggleX = this.toggleX.bind(this);\n  }\n\n  toggleX(index) {\n    //update grid status\n    let newStatus = _.clone(this.state.status);\n    let currentCell = newStatus[index];\n    let cellContent = currentCell.content;\n    let newType = 0;\n\n    let afterCurrent = false;\n    if (index > this.state.currentIndex) {\n      afterCurrent = true;\n    }\n\n    if (afterCurrent) {\n      return;\n    }\n\n    if (currentCell.type === 0) {\n      newType = 1;\n      cellContent = (<FaTimes size={'4rem'} style={{ color: '#333', }}/>);\n    } else if (currentCell.type === 1) {\n      newType = 0;\n      if (currentCell.current) {\n        cellContent = <div />;\n      } else {\n        cellContent = <GoCircleSlash size={'4rem'} style={{ color: '#ff003b'}}/>;\n      }\n    }\n\n\n    //Save New Cell Data\n    currentCell = {\n      ...currentCell,\n      type: newType,\n      content: cellContent,\n    }\n\n    //Update the state's \"status\" at the specific cell index\n    newStatus[index] = currentCell;\n\n    //Update the state\n    this.setState({\n      ...this.state,\n      status: [...newStatus],\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevState.status === this.state.status) {\n      console.log(\"XCard state has not changed\");\n    } else {\n      console.log(\"XCard state changed\");\n    }\n  }\n\n  render() {\n    const { status, currentIndex } = this.state;\n    return (\n      <Container>\n        {status.map((cell, index) => {\n          return (\n            <CardCell\n              key={index}\n              type={cell.type}\n              current={cell.current}\n              afterCurrent={index > currentIndex}\n              onMouseDown={() => this.toggleX(index)}\n              date={cell.date}\n              content={cell.content}\n            />\n          );\n        })}\n      </Container>\n    );\n  }\n}\n\nexport default XCard;\n","import React from \"react\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nimport XCard from '../components/XCard';\n\nconst IndexPage = () => (\n  <Layout>\n    <SEO title=\"Home\" keywords={[`gatsby`, `application`, `react`]} />\n    <XCard />\n  </Layout>\n)\n\nexport default IndexPage\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  if (!pageResources) {\n    return null\n  }\n\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      background: `rebeccapurple`,\n      marginBottom: `1.45rem`,\n    }}\n  >\n    <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `white`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's StaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <div\n          style={{\n            margin: `0 auto`,\n            maxWidth: 960,\n            padding: `0px 1.0875rem 1.45rem`,\n            paddingTop: 0,\n          }}\n        >\n          <main>{children}</main>\n          <footer>\n            © {new Date().getFullYear()}, Built with\n            {` `}\n            <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n          </footer>\n        </div>\n      </>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}